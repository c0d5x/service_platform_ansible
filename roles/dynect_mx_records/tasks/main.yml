---
# file: roles/dynect_mx_records/tasks/main.yml
#
# Creates DNS MX, DKIM TXT, and SPF TXT records via the DynECT API.
#

- name: Check if DNS zones already have MX records
  local_action: >
                uri url="{{ dynect_api_url }}/MXRecord/{{
                public_dns_zone | mandatory }}/{{ public_dns_zone }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
  register: zone_mx_records

- name: Examine the DNS zone existing MX records
  when: zone_mx_records|success
  with_items: zone_mx_records.json.data
  local_action: >
                uri url="{{ dynect_api_url }}/MXRecord/{{
                public_dns_zone | mandatory }}/{{ public_dns_zone
                }}/{{ item|basename }}"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
  register: current_mx_records

- name: Update DNS zone MX records
  with_items: current_mx_records.results|default([])
  when: (item.json.data.rdata.exchange == "{{ public_hostname }}.") and
        (item.json.data.rdata.preference != dns_mx_preference)
  local_action: >
                uri method=PUT url="{{ dynect_api_url }}/MXRecord/{{
                public_dns_zone | mandatory }}/{{ public_dns_zone
                }}/{{ item.json.data.record_id }}"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "exchange": "{{ public_hostname | mandatory }}",
                "preference": "{{ dns_mx_preference | mandatory }}"
                }, "ttl": "0" }'
  register: updated_mx_records
  changed_when: True

- name: Determine if any DNS MX records have changed
  with_items: current_mx_records.results|default([])
  when: (item.json.data.rdata.exchange == "{{ public_hostname }}.") and
        (item.json.data.rdata.preference == "{{ dns_mx_preference }}")
  debug: msg="MX record unchanged"
  register: existing_mx_record
  changed_when: False

- name: Make DNS zone MX records
  when: existing_mx_record|skipped
  local_action: >
                uri method=POST url="{{ dynect_api_url }}/MXRecord/{{
                public_dns_zone | mandatory }}/{{ public_dns_zone }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "exchange": "{{ public_hostname | mandatory }}",
                "preference": "{{ dns_mx_preference | mandatory }}"
                }, "ttl": "0" }'


#
# DANE TLSA records
#

- name: DANA X.509 certificate SHA-256 fingerprint
  shell: "openssl x509 -noout -fingerprint -sha256 < /etc/pki/tls/certs/{{
         public_hostname | mandatory }}-crt.pem | cut -d= -f2 | tr -d :"
  register: dane_sha256

- when: dane_sha256|success
  set_fact: dane_sha256_fingerprint="{{ dane_sha256.stdout | mandatory }}" 

- name: Check if DNS zones already have DANE TLSA records
  local_action: >
                uri url="{{ dynect_api_url }}/TLSARecord/{{
                public_dns_zone }}/*._tcp.{{ public_hostname | mandatory }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
  register: zone_tlsa_records
  ignore_errors: yes

- name: Update DNS zone DANE PKIX-EE TLSA records
  when: zone_tlsa_records|success and
        zone_tlsa_records.json.data|list|length > 0
  local_action: >
                uri method=PUT url="{{ dynect_api_url }}/TLSARecord/{{
                public_dns_zone }}/*._tcp.{{ public_hostname }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "cert_usage": "1",
                "selector": "0",
                "match_type": "1",
                "certificate": "{{ dane_sha256_fingerprint | mandatory }}"
                }, "ttl": "0" }'
  register: updated_tlsa_records
  changed_when: True

- name: Make DNS zone DANE PKIX-EE TLSA records
  when: updated_tlsa_records|skipped
  local_action: >
                uri method=POST url="{{ dynect_api_url }}/TLSARecord/{{
                public_dns_zone | mandatory }}/*._tcp.{{ public_hostname }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "cert_usage": "1",
                "selector": "0",
                "match_type": "1",
                "certificate": "{{ dane_sha256_fingerprint | mandatory }}"
                }, "ttl": "0" }'

#
# DomainKeys Identified Mail (DKIM) TXT records
#

- name: Check if DNS zones already have DKIM TXT records
  local_action: >
                uri url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone }}/{{ dns_txt_attr_name | mandatory }}.{{
                public_dns_zone }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
  register: zone_txt_records
  ignore_errors: yes

#
# roles/postfix_standalone brings the dns_txt_data
#
- name: Update DNS zone DKIM TXT records
  when: zone_txt_records|success
  local_action: >
                uri method=PUT url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone }}/{{ dns_txt_attr_name }}.{{ public_dns_zone
                }}/{{ zone_txt_records.json.data.0|basename }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "txtdata": "{{ dns_txt_data | mandatory }}"
                }, "ttl": "0" }'
  register: updated_txt_records
  changed_when: True

- name: Make DNS zone DKIM TXT records
  when: updated_txt_records|skipped
  local_action: >
                uri method=POST url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone | mandatory }}/{{ dns_txt_attr_name }}.{{
                public_dns_zone }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "txtdata": "{{ dns_txt_data | mandatory }}"
                }, "ttl": "0" }'

#
# Sender Policy Framework (SPF) records
#
# http://en.wikipedia.org/wiki/Sender_Policy_Framework
#
# Every domain name or host that has an A record or MX record should have
# an SPF TXT record specifying the policy if it is used either in an email
# address or as HELO/EHLO argument.
#

- name: Check if DNS zones already have SPF TXT records
  local_action: >
                uri url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone }}/{{ public_dns_zone | mandatory }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
  register: zone_spf_records
  ignore_errors: yes

#
# roles/postfix_standalone brings the dns_spf_data
#
- name: Update DNS zone SPF TXT records
  when: zone_spf_records|success
  with_items: zone_spf_records.json.data
  local_action: >
                uri method=PUT url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone }}/{{ public_dns_zone }}/{{ item|basename }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "txtdata": "{{ dns_spf_data | mandatory }}"
                }, "ttl": "0" }'
  register: updated_spf_records
  changed_when: True

- name: Make DNS zone SPF TXT records
  when: updated_spf_records|skipped
  local_action: >
                uri method=POST url="{{ dynect_api_url }}/TXTRecord/{{
                public_dns_zone | mandatory }}/{{ public_dns_zone }}/"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{ "rdata": {
                "txtdata": "{{ dns_spf_data | mandatory }}"
                }, "ttl": "0" }'

#
# Publish the records
#

- name: Publish DNS zones
  local_action: >
                uri method=PUT url="{{ dynect_api_url }}/Zone/{{
                public_dns_zone | mandatory }}"
                HEADER_Content-Type="application/json"
                HEADER_Auth-Token="{{ dynect_session_token }}"
                body='{"publish":true}'
