---
# file: roles/http_server/tasks/main.yml

- name: Apache HTTP Server
  sudo: yes
  yum: name=httpd

- name: Websites
  when: websites is defined
  sudo: yes
  with_items: websites|default([])
  copy: src="{{ inventory_dir }}/websites/{{ item }}/htdocs/"
        dest="/var/www/{{ item }}/htdocs"
        owner=root group=root mode=0644

#
# On the list of websites the first item is considered the default.
#
- when: websites is defined
  set_fact: http_server_name="{{ websites.0 }}"

#
# The public hostname (that also has reverse DNS resolution) may be the same
# as the domain name (just example.com). A wildcard certificate does not match
# that, so the default website should be different, usually www.example.com.
#
- when: (websites is not defined) and
        public_hostname is defined and (public_hostname != public_dns_zone) 
  set_fact: http_server_name="{{ public_hostname }}"

#
# When all else fails, use the FQDN. Note that this may be an internal name
# that is not necessarily found in the DNS.
#
- when: (http_server_name is not defined) or http_server_name.strip() == ""
  set_fact: http_server_name="{{ ansible_fqdn | mandatory }}"

- name: HTTP server name
  sudo: yes
  lineinfile: dest=/etc/httpd/conf/httpd.conf
              regexp='^\s*ServerName\s'
              line="ServerName {{ http_server_name | mandatory }}:80"
              insertafter='^#\s*ServerName'

- name: HTTP server administrator public email address conforming to RFC 2142
  sudo: yes
  lineinfile: dest=/etc/httpd/conf/httpd.conf
              regexp='^\s*ServerAdmin\s'
              line="ServerAdmin webmaster@{{ public_dns_zone }}"
              insertafter='^#\s*ServerAdmin'

- name: HTTP server document root
  sudo: yes
  lineinfile: dest=/etc/httpd/conf/httpd.conf
              regexp='^\s*DocumentRoot\s'
              line="DocumentRoot "/var/www/{{ http_server_name }}/htdocs""
              insertafter='^#\s*DocumentRoot'

- name: Query if the HTTP service has been added to the firewall zone
  sudo: yes
  command: firewall-cmd --zone={{ firewall_zone | mandatory }}
           --query-service=http
  register: zone_http
  changed_when: (zone_http.rc != 0) or not zone_http.stdout|bool
  failed_when: None

- name: Open the firewall for the HTTP service
  when: zone_http|changed
  sudo: yes
  command: firewall-cmd --permanent --zone={{ firewall_zone | mandatory }}
           --add-service=http
  notify: Reload the firewall

- name: Make DNS A records
  with_items: websites|default([])
  when: dynect_session_result|success and
        public_dns_zone is defined and
        public_ipv4_address is defined
  local_action: >
                command curl -s -X POST -H 'Content-Type: application/json'
                -H 'Auth-Token: {{ dynect_session_token }}'
                {{ dynect_api_url }}/ARecord/{{ public_dns_zone }}/{{ item }}.
                -d '{"rdata":{"address":"{{ public_ipv4_address }}"}}'
  register: dynect_result
  changed_when: (dynect_result.stdout|from_json).status == 'success'
  failed_when: (dynect_result.stdout|from_json).status != 'success' and
               not 'duplicate' in (dynect_result.stdout|from_json).msgs[0].INFO

- name: Publish DNS zones
  when: dynect_result|changed
  local_action: >
                command curl -s -X PUT -H 'Content-Type: application/json'
                -H 'Auth-Token: {{ dynect_session_token }}'
                {{ dynect_api_url }}/Zone/{{ public_dns_zone }} -d '{"publish":true}'
  register: dynect_result
  changed_when: (dynect_result.stdout|from_json).status == 'success' and
                '{{ public_dns_zone }} published' in (dynect_result.stdout|from_json).msgs[0].INFO
  failed_when: (dynect_result.stdout|from_json).status != 'success'
