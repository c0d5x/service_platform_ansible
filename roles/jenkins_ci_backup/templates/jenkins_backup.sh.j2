#!/usr/bin/env bash

#
# https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins
#

DBPREFIX="jenkins"
CLIENT_DIR="{{ jenkins_home | mandatory }}"
TIMESTAMP="$(date -u +'%FT%H%MZ')"

DBNAME="${DBPREFIX}_$(hostname)"
ARCHIVE="${DBNAME}_${TIMESTAMP}.tgz"

#
# The backup user account has the access keys to Hetzner backup space.
#
BACKUP_USER="{{ admin_username | mandatory }}"
BACKUPS_DIR="/home/${BACKUP_USER}/backups"
OUTBOUND_QUEUE="${BACKUPS_DIR}/out"
mkdir -p ${OUTBOUND_QUEUE}
chown -R ${BACKUP_USER}:${BACKUP_USER} ${BACKUPS_DIR}
chmod -R o-rwx ${BACKUPS_DIR}

cd "${BACKUPS_DIR}"
umask 077

nice -n 19 tar --exclude-from="${CLIENT_DIR}/${DBPREFIX}_backup_excludes"\
 -czf ${ARCHIVE} ${CLIENT_DIR}

EXITVALUE=$?
if [ $EXITVALUE -ne 0 ]; then
    logger -t backup_${DBPREFIX} -p user.error\
     "ALERT tar exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi

#
# Generate a random password:
#
dd if=/dev/random bs={{ backup_password_bytes | mandatory }} count=1 2>/dev/null | base64\
 > ${DBNAME}_${TIMESTAMP}.pass.txt

ALGO=aes-256-cbc

#
# Encrypt the backup archive with the password:
#
nice -n 19 openssl enc -${ALGO} -pass file:${DBNAME}_${TIMESTAMP}.pass.txt\
 -in ${ARCHIVE} -out ${ARCHIVE}.${ALGO}
EXITVALUE=$?
if [ $EXITVALUE -eq 0 ]; then
    nice -n 19 shred --iterations=25 --remove --force --zero ${ARCHIVE}
else
    logger -t backup_${DBPREFIX} -p user.error\
     "ALERT openssl enc exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi

#
# Encrypt the password file with the backup service public key:
#
nice -n 19 openssl pkeyutl -encrypt\
 -pubin -inkey "{{ backup_keys_path | mandatory }}/backup-service-public.pem"\
 -in ${DBNAME}_${TIMESTAMP}.pass.txt\
 -out ${DBNAME}_${TIMESTAMP}.pass.safe
EXITVALUE=$?
if [ $EXITVALUE -eq 0 ]; then
    nice -n 19 shred --iterations=25\
     --remove --force --zero ${DBNAME}_${TIMESTAMP}.pass.txt
else
    logger -t backup_${DBPREFIX} -p user.error\
     "ALERT openssl pkeyutl exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi

#
# Transfer the encrypted archive and password file to the backup service:
#
mv *.pass.safe ${OUTBOUND_QUEUE}/
mv *.${ALGO} ${OUTBOUND_QUEUE}/
chown -R ${BACKUP_USER}:${BACKUP_USER} ${OUTBOUND_QUEUE}

LFTP="open -u {{ backup_onsite_account | mandatory }}, {{ backup_onsite_protocol | mandatory }}://{{ backup_onsite_service | mandatory }};"
REMOTE_DIR="`date -u +"%Y-%m"`/`hostname`${CLIENT_DIR}"

su - ${BACKUP_USER} -c\
 "lftp -c '${LFTP} mkdir -p ${REMOTE_DIR}' > /dev/null 2>&1"
nice -n 19 su - ${BACKUP_USER} -c\
 "lftp -c '${LFTP} mirror --Remove-source-files -R ${OUTBOUND_QUEUE} ${REMOTE_DIR}'"

exit 0