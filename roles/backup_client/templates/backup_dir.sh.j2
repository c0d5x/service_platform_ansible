#!/usr/bin/env bash

#
# Creates an encrypted archive of the given directory with the given name.
#

usage() { echo "Usage: $0 [-n <string>] [-d <path>] [-a <algorithm>]" 1>&2; exit 1; }

while getopts a:d:n: o
do  case "${o}" in
    a)
        algorithm="${OPTARG}"
        ;;
    d)
        clientdir="${OPTARG}"
        ;;
    n)
        name="${OPTARG}"
        ;;
    *)
        usage
        ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${name}" ] || [ -z "${clientdir}" ]; then
    usage
fi

TIMESTAMP="$(date -u +'%FT%H%MZ')"

DBNAME="${name}_$(hostname)"
ARCHIVE="${DBNAME}_${TIMESTAMP}.tgz"

du -sh --time --time-style=full-iso ${clientdir} 

#
# Create the backup archive:
#

if [ -f "${clientdir}/.backup_excludes" ]; then
    TAR_OPTS="--exclude-from=${clientdir}/.backup_excludes"
else
    TAR_OPTS=""
fi

if [[ "${clientdir}" == /* ]]; then
    TAR_OPTS="${TAR_OPTS} -C /"
    clientdir="${clientdir:1}"
fi

nice -n 19 tar ${TAR_OPTS} -czf ${ARCHIVE} ${clientdir}
EXITVALUE=$?
if [ $EXITVALUE -ne 0 ]; then
    logger -t backup_dir -p user.error\
     "ALERT tar exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi
stat --format="%n (%s B) %y" ${ARCHIVE}

#
# Generate a random password:
#
dd if=/dev/random bs={{ archive_password_bytes | mandatory }} count=1 2>/dev/null | base64\
 > ${DBNAME}_${TIMESTAMP}.pass.txt

#
# Encrypt the backup archive with the password:
#
nice -n 19 openssl enc -${algorithm} -pass file:${DBNAME}_${TIMESTAMP}.pass.txt\
 -in ${ARCHIVE} -out ${ARCHIVE}.${algorithm}.tmp
EXITVALUE=$?
if [ $EXITVALUE -eq 0 ]; then
    mv ${ARCHIVE}.${algorithm}.tmp ${ARCHIVE}.${algorithm}
    nice -n 19 shred --iterations=25 --remove --force --zero ${ARCHIVE}
else
    logger -t backup_dir -p user.error\
     "ALERT openssl enc exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi
stat --format="%n (%s B) %y" ${ARCHIVE}.${algorithm}

#
# Encrypt the password file with the archives public key:
#
nice -n 19 openssl pkeyutl -encrypt\
 -pubin -inkey "{{ archive_keys_path | mandatory }}/archives-public.pem"\
 -in ${DBNAME}_${TIMESTAMP}.pass.txt\
 -out ${DBNAME}_${TIMESTAMP}.pass.tmp
EXITVALUE=$?
if [ $EXITVALUE -eq 0 ]; then
    mv ${DBNAME}_${TIMESTAMP}.pass.tmp ${DBNAME}_${TIMESTAMP}.pass.safe
    nice -n 19 shred --iterations=25\
     --remove --force --zero ${DBNAME}_${TIMESTAMP}.pass.txt
else
    logger -t backup_dir -p user.error\
     "ALERT openssl pkeyutl exited with [$EXITVALUE] for data set ${DBNAME}"
    exit $EXITVALUE
fi
stat --format="%n (%s B) %y" ${DBNAME}_${TIMESTAMP}.pass.safe