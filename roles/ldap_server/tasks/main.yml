---
# file: roles/ldap_server/tasks/main.yml

#
# OpenLDAP directory service
#
# Also creates a user account in the directory for application server
# integration. Further contents of the directory are considered application data
# that is not managed as configuration items.
#
# http://www.openldap.org/doc/admin24/index.html
# http://www.zytrax.com/books/ldap/ch6/slapd-config.html
#
# Generate the root password using slappasswd and record it in:
# /mnt/sensitive_data/etc/ansible/vars/admin_access.yml
#
#ldap_root_password: "{SSHA}8wEXAMPLE/vv04kIDUMMY7iYFDy3jhEJ"
#

- name: Required packages
  with_items:
  - openldap-servers
  - openldap-clients
  sudo: yes
  yum: name={{ item }}
  register: ldap_installation

- name: Delete the default databases
  when: ldap_installation|changed
  with_items:
  - "{1}monitor"
  - "{2}hdb"
  sudo: yes
  file: path=/etc/openldap/slapd.d/cn=config/olcDatabase={{ item }}.ldif
        state=absent

- name: Determine the LDAP domain components based on the public DNS zone
  set_fact:
    ldap_dc_tld:
      "{{ public_dns_zone | regex_replace('^.*\\.([^.]+)$', '\\\\1') }}"
    ldap_dc_dom:
      "{{ public_dns_zone | regex_replace('^([^.]+)\\.[^.]+$', '\\\\1') }}"

#
# Transport Layer Security
#

- set_fact:
    ldap_olc_suffix: "dc={{ ldap_dc_dom }},dc={{ ldap_dc_tld }}"
    ldap_root_username: "{{ (ldap_root_username|default('Manager')).strip() }}"

- name: Sanity check the LDAP root user name
  when: ldap_root_username | mandatory == "root"
  fail:
    msg: Please set an ldap_root_username other than 'root'.
         The default is 'Manager'.

- set_fact:
    ldap_root_dn: "cn={{ ldap_root_username }},{{ ldap_olc_suffix }}"
    ldap_tls_cipher_suite: "NONE:+{{ (tls_protocols|mandatory|list) | join(':+')
                           + ([''] + tls_protocol_excludes|mandatory|list) | join(':!')
                           + ([''] + tls_ciphersuite|mandatory|list) | join(':+')
                           + ([''] + tls_ciphersuite_excludes|mandatory|list) | join(':!')
                           }}"

- name: Enable the Stand-alone LDAP daemon
  sudo: yes
  service: name=slapd enabled=yes state=started

- name: Calculate x509 hashes for the CA certificate
  with_items:
  - "{{ tls_certificate_chain_file | mandatory }}"
  sudo: yes
  command: openssl x509 -noout -hash -in /etc/pki/tls/certs/{{ item }}
  register: ldap_ca_x509_hash
  changed_when: False

- name: Manage x509 hashes in the CA certificates directory
  with_items: ldap_ca_x509_hash.results | default([])
  when: item.rc == 0 and item.stdout is defined
  sudo: yes
  command: chdir=/etc/openldap/certs creates={{ item.stdout }}.0
           ln -s /etc/pki/tls/certs/{{ item.item }} {{ item.stdout }}.0
  notify: Restart the directory server

- name: Secure LDAPS port listener
  sudo: yes
  lineinfile:
    dest: /etc/sysconfig/slapd
    regexp: "^#?\\s*SLAPD_URLS=.*$"
    line: 'SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"' 
  notify: Restart the directory server

- name: Configuration LDIF files
  with_items:
  - tls
  - monitor
  - hdb
  - domain
  - people
  - account_wildfly
  sudo: yes
  template: src={{ item }}.ldif.j2 dest=~/{{ item }}.ldif mode=640

- name: LDAP client command-line options
  set_fact:
    ldap_opts: "-Y external -H ldapi:///"

- name: Configure TLS
  sudo: yes
  command: ldapmodify {{ ldap_opts }} -f ~/tls.ldif

#
# Schemas
#

- name: Check if the schemas are loaded
  with_items:
  - cosine
  - nis
  - inetorgperson
  sudo: yes
  command: ldapsearch -ALLLQ {{ ldap_opts }} -b "cn=config"
           "cn={*}{{ item }}" dn
  register: ldap_schema_loaded
  changed_when: ldap_schema_loaded.rc == 0 and
                ldap_schema_loaded.stdout.strip() == ""

- name: Configure LDAP schemas
  with_items: ldap_schema_loaded.results | default([])
  when: item|changed
  sudo: yes
  command: ldapadd {{ ldap_opts }} -f /etc/openldap/schema/{{ item.item }}.ldif

#
# Databases
#

- name: Check if the databases already exist
  with_items:
  - monitor
  - hdb
  sudo: yes
  command: ldapsearch -ALLLQ {{ ldap_opts }} -b "cn=config"
           "olcSuffix={{ ldap_olc_suffix }}"
  register: ldap_db_exists
  changed_when: ldap_db_exists.rc == 0 and ldap_db_exists.stdout.strip() == ""

- name: Add the databases
  with_items: ldap_db_exists.results | default([])
  when: item|changed
  sudo: yes
  command: ldapadd {{ ldap_opts }} -f ~/{{ item.item }}.ldif

- name: Check if the domain exists
  sudo: yes
  command: slapcat -b "{{ ldap_olc_suffix }}" -a "o={{ ldap_dc_dom }}"
  register: ldap_domain_exists
  changed_when: ldap_domain_exists.rc == 0 and
                ldap_domain_exists.stdout.strip() == ""
  failed_when: ldap_domain_exists.rc != 0 and
               ldap_domain_exists.stderr.strip() != ""

- name: Check if the people organizational unit exists
  sudo: yes
  command: slapcat -b "{{ ldap_olc_suffix }}" -a "ou=people"
  register: ldap_people_exist
  changed_when: ldap_people_exist.rc == 0 and
                ldap_people_exist.stdout.strip() == ""
  failed_when: ldap_people_exist.rc != 0 and
               ldap_people_exist.stderr.strip() != ""

- name: Stop the Stand-alone LDAP daemon
  when: ldap_domain_exists|changed or
        ldap_people_exist|changed
  sudo: yes
  service: name=slapd state=stopped

- name: Add the domain
  when: ldap_domain_exists|changed
  sudo: yes
  command: slapadd -b "{{ ldap_olc_suffix }}" -l ~/domain.ldif

- name: Add the organizational unit for people
  when: ldap_people_exist|changed
  sudo: yes
  command: slapadd -b "{{ ldap_olc_suffix }}" -l ~/people.ldif

- name: Database configuration permissions
  sudo: yes
  file: state=directory recurse=yes path=/var/lib/ldap
        owner=ldap group=ldap

- name: Start the Stand-alone LDAP daemon
  when: ldap_domain_exists|changed or
        ldap_people_exist|changed
  sudo: yes
  service: name=slapd state=started

- name: Check if the wildfly account exists
  sudo: yes
  command: ldapsearch -ALLLQ {{ ldap_opts }}
           -b "ou=people,{{ ldap_olc_suffix }}" "uid=wildfly" dn
  register: ldap_wildfly_exists
  changed_when: ldap_wildfly_exists.rc == 0 and
                ldap_wildfly_exists.stdout.strip() == ""
  failed_when: ldap_wildfly_exists.rc != 0 and
               ldap_wildfly_exists.stderr.strip() != ""

- name: Add the wildfly account
  when: ldap_wildfly_exists|changed
  sudo: yes
  command: ldapadd {{ ldap_opts }} -f ~/account_wildfly.ldif

#
# LDAP client
#

- name: LDAP client configuration
  with_items:
  - key: "BASE"
    val: "{{ ldap_olc_suffix | mandatory }}"
  - key: "URI"
    val: "ldap://{{ inventory_hostname | mandatory }}"
  - key: "TLS_CIPHER_SUITE"
    val: "{{ ldap_tls_cipher_suite | mandatory }}"
  sudo: yes
  lineinfile:
    dest: "/etc/openldap/ldap.conf"
    backrefs: yes
    regexp: "^#?\\s*{{ item.key }}(\\s+).*$"
    line: "{{ item.key | mandatory }}\\1{{ item.val | mandatory }}" 

#
# Firewall
#

- sudo: yes
  service: name=firewalld state=started

- name: Query if directory services have been added to the firewall zone
  with_items:
  - ldap
  - ldaps
  sudo: yes
  command: firewall-cmd --zone={{ firewall_zone | mandatory }}
           --query-service={{ item }}
  register: zone_ldap
  changed_when: (zone_ldap.rc != 0) or not zone_ldap.stdout|bool
  failed_when: None

- name: Open the firewall for directory services
  with_items: zone_ldap.results | default([])
  when: item|changed
  sudo: yes
  command: firewall-cmd --permanent --zone={{ firewall_zone | mandatory }}
           --add-service={{ item.item }}
  notify: Restart firewall
